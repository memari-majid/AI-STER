---
alwaysApply: true
---


#### ðŸ”¹ Keep It Lightweight

1. **Stay minimal** â€” only build whatâ€™s needed to validate the idea.
2. **Avoid complex setups** â€” prefer simple scripts or modules over frameworks unless justified.

#### ðŸ”¹ Code Cleanliness

3. **Keep code readable and organized** â€” use clear naming and structure.
4. **Donâ€™t overengineer** â€” no need for heavy abstractions or boilerplate.
5. **Reuse when possible** â€” donâ€™t duplicate logic across files.

#### ðŸ”¹ Work Incrementally

6. **Take small steps** â€” implement one idea at a time.
7. **Test often, break nothing** â€” make sure the prototype still runs after each change.
8. **Keep history clear** â€” meaningful, atomic commits.

#### ðŸ”¹ Documentation & Communication

9. **Update inline comments and README** â€” briefly document key files, setup steps, and usage.
10. **Explain decisions** â€” if something is hacky or experimental, note it clearly in comments.

#### ðŸ”¹ Prototype Mindset

11. **Speed over polish, but not chaos** â€” balance fast iteration with maintainability.
12. **Prepare for handoff or scale-up** â€” make it understandable for someone else (or future you).

#### ðŸ”¹ Project Roadmap

13. **Follow the Development Plan** â€” All work should align with the roadmap and phases outlined in `docs/PROJECT.md`. We will implement features incrementally, following software development best practices.

11. **Speed over polish, but not chaos** â€” balance fast iteration with maintainability.
12. **Prepare for handoff or scale-up** â€” make it understandable for someone else (or future you).
#### ðŸ”¹ Keep It Lightweight

1. **Stay minimal** â€” only build whatâ€™s needed to validate the idea.
2. **Avoid complex setups** â€” prefer simple scripts or modules over frameworks unless justified.

#### ðŸ”¹ Code Cleanliness

3. **Keep code readable and organized** â€” use clear naming and structure.
4. **Donâ€™t overengineer** â€” no need for heavy abstractions or boilerplate.
5. **Reuse when possible** â€” donâ€™t duplicate logic across files.

#### ðŸ”¹ Work Incrementally

6. **Take small steps** â€” implement one idea at a time.
7. **Test often, break nothing** â€” make sure the prototype still runs after each change.
8. **Keep history clear** â€” meaningful, atomic commits.

#### ðŸ”¹ Documentation & Communication

9. **Update inline comments and README** â€” briefly document key files, setup steps, and usage.
10. **Explain decisions** â€” if something is hacky or experimental, note it clearly in comments.

#### ðŸ”¹ Prototype Mindset

11. **Speed over polish, but not chaos** â€” balance fast iteration with maintainability.
12. **Prepare for handoff or scale-up** â€” make it understandable for someone else (or future you).

#### ðŸ”¹ Project Roadmap

13. **Follow the Development Plan** â€” All work should align with the roadmap and phases outlined in `docs/PROJECT.md`. We will implement features incrementally, following software development best practices.

11. **Speed over polish, but not chaos** â€” balance fast iteration with maintainability.
12. **Prepare for handoff or scale-up** â€” make it understandable for someone else (or future you).